@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';

@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

@function rem($value, $base-value: $g-font-size-root) {
  @if not $base-value {
    // stylelint-disable-next-line meowtec/no-px
    $base-value: 16px;
  }

  @if math.unit($base-value) == '%' {
    // stylelint-disable-next-line meowtec/no-px
    $base-value: math.div($base-value, 100%) * 16px;
  }

  @if math.unit($base-value) == 'rem' or math.unit($base-value) == 'em' {
    // stylelint-disable-next-line meowtec/no-px
    $base-value: strip-unit($base-value) * 16px;
  }

  $value: math.div(strip-unit($value), strip-unit($base-value)) * 1rem;

  @if strip-unit($value) == 0 {
    $value: 0;
  }

  @return $value;
}

@function rem-to-px($value, $base-value: $g-font-size-root) {
  @if not $base-value {
    // stylelint-disable-next-line meowtec/no-px
    $base-value: 16px;
  }

  @if math.unit($base-value) == '%' {
    // stylelint-disable-next-line meowtec/no-px
    $base-value: ($base-value / 100%) * 16px;
  }

  @if math.unit($base-value) == 'rem' or math.unit($base-value) == 'em' {
    // stylelint-disable-next-line meowtec/no-px
    $base-value: strip-unit($base-value) * 16px;
  }

  $value: strip-unit($value) * strip-unit($base-value) * 1px;

  @if strip-unit($value) == 0 {
    $value: 0;
  }

  @return $value;
}

@function em($value, $base-value: $g-font-size-base) {
  $unit: math.unit($base-value);

  @if $unit == 'rem' {
    $base-value: rem-to-px($base-value);
  }

  @return ($value / $base-value) * 1em;
}

// Spacings
@function spacing($size: normal) {
  @return map.get($g-spacings, $size);
}

// Helpers
@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: math.abs($dividend);
  $divisor: math.abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error 'Cannot divide by 0';
  }

  $remainder: $dividend;
  $result: 0;
  $factor: 10;

  @while $remainder > 0 and $precision >= 0 {
    $quotient: 0;

    @while $remainder >= $divisor {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }

    $result: $result * 10 + $quotient;
    $factor: $factor * 0.1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;

    @if $precision < 0 and $remainder >= $divisor * 5 {
      $result: $result + 1;
    }
  }

  $result: $result * $factor * $sign;
  $dividend-unit: math.unit($dividend);
  $divisor-unit: math.unit($divisor);
  $unit-map: (
    'px': 1px,
    'rem': 1rem,
    'em': 1em,
    '%': 1%,
  );

  @if $dividend-unit != $divisor-unit and map.has-key($unit-map, $dividend-unit) {
    $result: $result * map.get($unit-map, $dividend-unit);
  }

  @return $result;
}
